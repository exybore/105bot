require_relative 'command'

module HundredFive
  module Commands
    class Poll < Command
      DESC = 'Lancer un sondage gr√¢ce aux r√©actions de Discord'
      CATEGORY = 'notes'
      ARGS = {
        name: {
          description: 'Nom du sondage',
          type: String,
          default: nil,
        },
        type: {
          description: "Th√®me pour les r√©actions. Valeur possibles : shapes, numbers, letters, food, faces, transportation",
          type: String,
          default: 'shapes'
        },
        options: {
          description: 'Options du sondage, s√©par√©es par une virgule (20 maximum)',
          type: String,
          default: nil,
          extend: true
        }
      }

      OPTIONS = {
        'shapes'         => %w[üî¥ üü§ üü† üü£ üü° üîµ üü¢ ‚ö´ ‚ö™ üü• üü´ üüß üü™ üü® üü¶ üü© ‚¨õ ‚¨ú üî∂ üî∫],
        'numbers'        => %w[0Ô∏è‚É£ 1Ô∏è‚É£ 2Ô∏è‚É£ 3Ô∏è‚É£ 4Ô∏è‚É£ 5Ô∏è‚É£ 6Ô∏è‚É£ 7Ô∏è‚É£ 8Ô∏è‚É£ 9Ô∏è‚É£ üîü üá¶ üáß üá® üá© üá™ üá´ üá¨ üá≠ üáÆ],
        'letters'        => %w[üá¶ üáß üá® üá© üá™ üá´ üá¨ üá≠ üáÆ üáØ üá∞ üá± üá≤ üá≥ üá¥ üáµ üá∂ üá∑ üá∏ üáπ],
        'food'           => %w[üçé üçç üçá ü•ê ü•ó ü•™ üçï ü•ì üçú ü•ò üçß üç© üç∞ üç¨ üç≠ ‚òï üßÉ üçµ üçæ üç∏],
        'faces'          => %w[üòÑ üòã üòé üòÇ ü•∞ üòé ü§î üôÑ üòë ü§® üòÆ üò¥ üòõ üò§ ü§ë üò≠ üò® ü•µ ü•∂ üò∑],
        'animals'        => %w[üêî üê¥ üê∏ üê∑ üêó üê∞ üêπ ü¶ä üê∂ üêº ü¶ì üêÅ üêò üê¢ üêç üê≥ ü¶ê üê† ü¶¢ ü¶ú],
        'transportation' => %w[üöó üöì üöå üöö üöú üöÖ üöã üöá üö† ‚úà üöÅ üöÄ üö¢ üõπ üö≤ üõ¥ üõµ üöë üöí ü¶Ω]
      }

      def self.exec(context, args)
        options = args[:options].split(',')
        raise Classes::ExecutionError.new(nil, "vous devez sp√©cifier un maximum de vingt options afin de cr√©er le sondage. Ceci est une limitation de Discord quant √† la quantit√© de r√©actions que peut contenir un seul message. Si vous souhaitez davantage d'options, cr√©ez d'autres sondages √† la suite.") if options.length > 20

        context.message.delete

        layout = OPTIONS[args[:type]]
        raise Classes::ExecutionError.new(nil, "le type de r√©actions est incorrect. Faites `105:commands` pour voir la liste des r√©actions possibles.") if layout.nil?

        emojis = layout[0..(options.length - 1)]
        description = ''
        options.each.with_index do |option, index|
          description << "#{emojis[index]} #{option}\n"
        end

        message = context.send_embed('', Utils.embed(
          title: ":bar_chart: Sondage : #{args[:name]}",
          description: description.chomp,
          author: Discordrb::Webhooks::EmbedAuthor.new(
            name: context.author.display_name,
            icon_url: context.author.avatar_url
          )
        ))
        emojis.each do |emoji|
          message.react(emoji)
        end
      end
    end
  end
end
